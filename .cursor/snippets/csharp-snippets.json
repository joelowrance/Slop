{
  "Entity Class": {
    "prefix": "entity",
    "body": [
      "using System.ComponentModel.DataAnnotations;",
      "using System.ComponentModel.DataAnnotations.Schema;",
      "",
      "namespace VerdaVidaLawnCare.Core.Models",
      "{",
      "    /// <summary>",
      "    /// Represents a ${1:EntityDescription}",
      "    /// </summary>",
      "    [Table(\"${2:TableName}\")]",
      "    public class ${3:EntityName}",
      "    {",
      "        /// <summary>",
      "        /// Gets or sets the unique identifier",
      "        /// </summary>",
      "        [Key]",
      "        public int Id { get; set; }",
      "",
      "        /// <summary>",
      "        /// Gets or sets the ${4:PropertyDescription}",
      "        /// </summary>",
      "        [Required]",
      "        [StringLength(${5:MaxLength})]",
      "        public string ${6:PropertyName} { get; set; } = string.Empty;",
      "",
      "        /// <summary>",
      "        /// Gets or sets the date and time when the record was created",
      "        /// </summary>",
      "        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;",
      "",
      "        /// <summary>",
      "        /// Gets or sets the date and time when the record was last updated",
      "        /// </summary>",
      "        public DateTime? UpdatedAt { get; set; }",
      "",
      "        /// <summary>",
      "        /// Gets or sets whether the record is active",
      "        /// </summary>",
      "        public bool IsActive { get; set; } = true;",
      "    }",
      "}"
    ],
    "description": "Creates a basic entity class with common properties"
  },
  "API Controller": {
    "prefix": "apicontroller",
    "body": [
      "using Microsoft.AspNetCore.Mvc;",
      "using VerdaVidaLawnCare.Core.Interfaces;",
      "using VerdaVidaLawnCare.Core.Models;",
      "",
      "namespace VerdaVidaLawnCare.API.Controllers",
      "{",
      "    [ApiController]",
      "    [Route(\"api/[controller]\")]",
      "    public class ${1:ControllerName}Controller : ControllerBase",
      "    {",
      "        private readonly I${2:ServiceName}Service _service;",
      "        private readonly ILogger<${1:ControllerName}Controller> _logger;",
      "",
      "        public ${1:ControllerName}Controller(",
      "            I${2:ServiceName}Service service,",
      "            ILogger<${1:ControllerName}Controller> logger)",
      "        {",
      "            _service = service;",
      "            _logger = logger;",
      "        }",
      "",
      "        /// <summary>",
      "        /// Gets all ${3:EntityName}s",
      "        /// </summary>",
      "        /// <returns>List of ${3:EntityName}s</returns>",
      "        [HttpGet]",
      "        public async Task<ActionResult<IEnumerable<${3:EntityName}>>> Get()",
      "        {",
      "            try",
      "            {",
      "                var items = await _service.GetAllAsync();",
      "                return Ok(items);",
      "            }",
      "            catch (Exception ex)",
      "            {",
      "                _logger.LogError(ex, \"Error retrieving ${3:EntityName}s\");",
      "                return StatusCode(500, \"Internal server error\");",
      "            }",
      "        }",
      "    }",
      "}"
    ],
    "description": "Creates a basic API controller with CRUD operations"
  },
  "Service Interface": {
    "prefix": "iservice",
    "body": [
      "using VerdaVidaLawnCare.Core.Models;",
      "",
      "namespace VerdaVidaLawnCare.Core.Interfaces",
      "{",
      "    /// <summary>",
      "    /// Service interface for ${1:EntityName} operations",
      "    /// </summary>",
      "    public interface I${1:EntityName}Service",
      "    {",
      "        /// <summary>",
      "        /// Gets all ${1:EntityName}s",
      "        /// </summary>",
      "        /// <returns>List of ${1:EntityName}s</returns>",
      "        Task<IEnumerable<${1:EntityName}>> GetAllAsync();",
      "",
      "        /// <summary>",
      "        /// Gets a ${1:EntityName} by ID",
      "        /// </summary>",
      "        /// <param name=\"id\">The ${1:EntityName} ID</param>",
      "        /// <returns>The ${1:EntityName} or null if not found</returns>",
      "        Task<${1:EntityName}?> GetByIdAsync(int id);",
      "",
      "        /// <summary>",
      "        /// Creates a new ${1:EntityName}",
      "        /// </summary>",
      "        /// <param name=\"entity\">The ${1:EntityName} to create</param>",
      "        /// <returns>The created ${1:EntityName}</returns>",
      "        Task<${1:EntityName}> CreateAsync(${1:EntityName} entity);",
      "",
      "        /// <summary>",
      "        /// Updates an existing ${1:EntityName}",
      "        /// </summary>",
      "        /// <param name=\"entity\">The ${1:EntityName} to update</param>",
      "        /// <returns>True if updated successfully, false otherwise</returns>",
      "        Task<bool> UpdateAsync(${1:EntityName} entity);",
      "",
      "        /// <summary>",
      "        /// Deletes a ${1:EntityName}",
      "        /// </summary>",
      "        /// <param name=\"id\">The ${1:EntityName} ID</param>",
      "        /// <returns>True if deleted successfully, false otherwise</returns>",
      "        Task<bool> DeleteAsync(int id);",
      "    }",
      "}"
    ],
    "description": "Creates a service interface with CRUD operations"
  },
  "Repository Interface": {
    "prefix": "irepository",
    "body": [
      "using VerdaVidaLawnCare.Core.Models;",
      "",
      "namespace VerdaVidaLawnCare.Core.Interfaces",
      "{",
      "    /// <summary>",
      "    /// Repository interface for ${1:EntityName} data access",
      "    /// </summary>",
      "    public interface I${1:EntityName}Repository",
      "    {",
      "        /// <summary>",
      "        /// Gets all ${1:EntityName}s",
      "        /// </summary>",
      "        /// <returns>List of ${1:EntityName}s</returns>",
      "        Task<IEnumerable<${1:EntityName}>> GetAllAsync();",
      "",
      "        /// <summary>",
      "        /// Gets a ${1:EntityName} by ID",
      "        /// </summary>",
      "        /// <param name=\"id\">The ${1:EntityName} ID</param>",
      "        /// <returns>The ${1:EntityName} or null if not found</returns>",
      "        Task<${1:EntityName}?> GetByIdAsync(int id);",
      "",
      "        /// <summary>",
      "        /// Adds a new ${1:EntityName}",
      "        /// </summary>",
      "        /// <param name=\"entity\">The ${1:EntityName} to add</param>",
      "        /// <returns>The added ${1:EntityName}</returns>",
      "        Task<${1:EntityName}> AddAsync(${1:EntityName} entity);",
      "",
      "        /// <summary>",
      "        /// Updates an existing ${1:EntityName}",
      "        /// </summary>",
      "        /// <param name=\"entity\">The ${1:EntityName} to update</param>",
      "        void Update(${1:EntityName} entity);",
      "",
      "        /// <summary>",
      "        /// Removes a ${1:EntityName}",
      "        /// </summary>",
      "        /// <param name=\"entity\">The ${1:EntityName} to remove</param>",
      "        void Remove(${1:EntityName} entity);",
      "    }",
      "}"
    ],
    "description": "Creates a repository interface for data access"
  }
}
