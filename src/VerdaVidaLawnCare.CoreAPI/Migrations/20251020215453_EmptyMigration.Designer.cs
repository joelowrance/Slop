// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VerdaVidaLawnCare.CoreAPI.Data;

#nullable disable

namespace VerdaVidaLawnCare.CoreAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251020215453_EmptyMigration")]
    partial class EmptyMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VerdaVidaLawnCare.CoreAPI.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_customers_email");

                    b.HasIndex("Phone")
                        .HasDatabaseName("ix_customers_phone");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("VerdaVidaLawnCare.CoreAPI.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int>("EquipmentType")
                        .HasColumnType("integer")
                        .HasColumnName("equipment_type");

                    b.Property<decimal>("HourlyRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("hourly_rate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_equipment");

                    b.HasIndex("EquipmentType")
                        .HasDatabaseName("ix_equipment_equipment_type");

                    b.ToTable("equipment", (string)null);
                });

            modelBuilder.Entity("VerdaVidaLawnCare.CoreAPI.Models.Estimate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTimeOffset>("EstimateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("estimate_date");

                    b.Property<string>("EstimateNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estimate_number");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("notes");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("terms");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_estimates");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_estimates_customer_id");

                    b.HasIndex("EstimateDate")
                        .HasDatabaseName("ix_estimates_estimate_date");

                    b.HasIndex("EstimateNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_estimates_estimate_number");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_estimates_status");

                    b.ToTable("estimates", (string)null);
                });

            modelBuilder.Entity("VerdaVidaLawnCare.CoreAPI.Models.EstimateLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("integer")
                        .HasColumnName("equipment_id");

                    b.Property<int>("EstimateId")
                        .HasColumnType("integer")
                        .HasColumnName("estimate_id");

                    b.Property<decimal>("LineTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("line_total");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("quantity");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("unit_price");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_estimate_line_items");

                    b.HasIndex("EquipmentId")
                        .HasDatabaseName("ix_estimate_line_items_equipment_id");

                    b.HasIndex("EstimateId")
                        .HasDatabaseName("ix_estimate_line_items_estimate_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_estimate_line_items_service_id");

                    b.ToTable("estimate_line_items", (string)null);
                });

            modelBuilder.Entity("VerdaVidaLawnCare.CoreAPI.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("base_price");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("ServiceType")
                        .HasColumnType("integer")
                        .HasColumnName("service_type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_services");

                    b.HasIndex("ServiceType")
                        .HasDatabaseName("ix_services_service_type");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("VerdaVidaLawnCare.CoreAPI.Models.Estimate", b =>
                {
                    b.HasOne("VerdaVidaLawnCare.CoreAPI.Models.Customer", "Customer")
                        .WithMany("Estimates")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_estimates_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("VerdaVidaLawnCare.CoreAPI.Models.EstimateLineItem", b =>
                {
                    b.HasOne("VerdaVidaLawnCare.CoreAPI.Models.Equipment", "Equipment")
                        .WithMany("EstimateLineItems")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_estimate_line_items_equipment_equipment_id");

                    b.HasOne("VerdaVidaLawnCare.CoreAPI.Models.Estimate", "Estimate")
                        .WithMany("EstimateLineItems")
                        .HasForeignKey("EstimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_estimate_line_items_estimates_estimate_id");

                    b.HasOne("VerdaVidaLawnCare.CoreAPI.Models.Service", "Service")
                        .WithMany("EstimateLineItems")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_estimate_line_items_services_service_id");

                    b.Navigation("Equipment");

                    b.Navigation("Estimate");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("VerdaVidaLawnCare.CoreAPI.Models.Customer", b =>
                {
                    b.Navigation("Estimates");
                });

            modelBuilder.Entity("VerdaVidaLawnCare.CoreAPI.Models.Equipment", b =>
                {
                    b.Navigation("EstimateLineItems");
                });

            modelBuilder.Entity("VerdaVidaLawnCare.CoreAPI.Models.Estimate", b =>
                {
                    b.Navigation("EstimateLineItems");
                });

            modelBuilder.Entity("VerdaVidaLawnCare.CoreAPI.Models.Service", b =>
                {
                    b.Navigation("EstimateLineItems");
                });
#pragma warning restore 612, 618
        }
    }
}
